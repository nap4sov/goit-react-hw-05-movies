{"version":3,"file":"static/js/789.553ca748.chunk.js","mappings":"2NACA,EAA0B,wB,SCU1B,EARqB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACpB,OAAO,cAAGC,UAAWC,EAAd,SAA+BF,KCEpCG,GAAkBC,EAAAA,EAAAA,OAAK,kBAAM,gCAC7BC,GAAmBD,EAAAA,EAAAA,OAAK,kBAAM,gCAsCpC,EApCe,WACX,OAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,EAAQP,EAAaQ,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACDF,IAGLG,EAAAA,EAAAA,IAAmBH,GACdI,MAAK,SAAAR,GACF,GAAsB,IAAlBA,EAAOS,OAEP,MADAX,EAAgB,IACV,IAAIY,MAAM,wCAEpBT,EAAUD,GACVG,EAAS,OAEZQ,OAAM,SAAAT,GACHC,EAASD,EAAMZ,cAExB,CAACc,EAAON,IAMX,OACI,UAAC,EAAAc,SAAD,CAAUC,SAAS,aAAnB,WACI,SAACpB,EAAD,CAAiBqB,SANR,SAAAC,GACbjB,EAAgBiB,EAAY,CAAEX,MAAOW,GAAc,OAM7Cb,GAA+C,SAAC,EAAD,CAAcZ,QAASY,KAA9D,SAACP,EAAD,CAAkBK,OAAQA,S,6NCxChD,IAAMgB,EAAU,2CACVC,EAAW,gCACJC,EAAkB,mCAClBC,EAAsB,uCACtBC,EAAoB,kCAEpBC,EAAsB,WAC/B,OAAOC,MAAM,GAAD,OAAIL,EAAJ,8BAAkCD,IACzCR,MAAK,SAAAe,GACF,IAAKA,EAAIC,GACL,MAAM,IAAId,MAAM,qBAEpB,OAAOa,EAAIE,UAEdjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC,YAGdpB,EAAqB,SAAAqB,GAC9B,OAAON,MAAM,GAAD,OAAIL,EAAJ,8BAAkCW,EAAlC,YAA2CZ,IAClDR,MAAK,SAAAe,GACF,IAAKA,EAAIC,GACL,MAAM,IAAId,MAAM,qBAEpB,OAAOa,EAAIE,UAEdjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC,YAGdE,EAAoB,SAAAC,GAC7B,OAAOR,MAAM,GAAD,OAAIL,EAAJ,iBAAqBa,EAArB,YAAgCd,IAAWR,MAAK,SAAAe,GACxD,IAAKA,EAAIC,GACL,MAAM,IAAId,MAAM,qBAEpB,OAAOa,EAAIE,WAINM,EAAoB,SAAAD,GAC7B,OAAOR,MAAM,GAAD,OAAIL,EAAJ,iBAAqBa,EAArB,oBAAwCd,IAAWR,MAAK,SAAAe,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAId,MAAM,qBAEpB,OAAOa,EAAIE,WAINO,EAAoB,SAAAF,GAC7B,OAAOR,MAAM,GAAD,OAAIL,EAAJ,iBAAqBa,EAArB,oBAAwCd,IAAWR,MAAK,SAAAe,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAId,MAAM,qBAEpB,OAAOa,EAAIE,OAAOjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC","sources":["webpack://goit-react-hw-05-movies/./src/pages/Movies/styles.module.css?65fd","pages/Movies/ErrorMessage.jsx","pages/Movies/index.jsx","services/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message\":\"styles_message__Mi5fH\"};","import styles from './styles.module.css';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return <p className={styles.message}>{message}</p>;\n};\n\nErrorMessage.propTypes = {\n    movies: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect, lazy, Suspense } from 'react';\nimport { fetchMoviesByTitle } from 'services/moviesApi';\nimport ErrorMessage from './ErrorMessage';\n\nconst MovieSearchForm = lazy(() => import('../../components/MovieSearchForm'));\nconst MoviesSearchList = lazy(() => import('../../components/MoviesSearchList'));\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const query = searchParams.get('query');\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        }\n        fetchMoviesByTitle(query)\n            .then(movies => {\n                if (movies.length === 0) {\n                    setSearchParams({});\n                    throw new Error(\"Your query doesn't match any results\");\n                }\n                setMovies(movies);\n                setError('');\n            })\n            .catch(error => {\n                setError(error.message);\n            });\n    }, [query, setSearchParams]);\n\n    const setQuery = formQuery => {\n        setSearchParams(formQuery ? { query: formQuery } : {});\n    };\n\n    return (\n        <Suspense fallback=\"Loading...\">\n            <MovieSearchForm onSubmit={setQuery} />\n            {!error ? <MoviesSearchList movies={movies} /> : <ErrorMessage message={error} />}\n        </Suspense>\n    );\n};\n\nexport default Movies;\n","const API_KEY = 'api_key=37eb00bc9ebde6b8ee688dc1b47e357c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const BACKGROUND_BASE_URL = 'https://image.tmdb.org/t/p/original/';\nexport const CAST_PIC_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const fetchTrendingMovies = () => {\n    return fetch(`${BASE_URL}trending/movie/day?${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMoviesByTitle = title => {\n    return fetch(`${BASE_URL}search/movie?query=${title}&${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMovieDetails = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/credits?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/reviews?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json().then(data => data.results);\n    });\n};\n"],"names":["message","className","styles","MovieSearchForm","lazy","MoviesSearchList","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","error","setError","query","get","useEffect","fetchMoviesByTitle","then","length","Error","catch","Suspense","fallback","onSubmit","formQuery","API_KEY","BASE_URL","POSTER_BASE_URL","BACKGROUND_BASE_URL","CAST_PIC_BASE_URL","fetchTrendingMovies","fetch","res","ok","json","data","results","title","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}