{"version":3,"file":"static/js/398.38115e7d.chunk.js","mappings":"oOAUA,EARqB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACpB,OAAO,uBAAIA,KC6Bf,EA1BgB,WACZ,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAkBH,GAASI,KAAKL,KACjC,CAACC,IAEmB,IAAnBF,EAAQO,QACD,SAAC,EAAD,CAAcT,QAAQ,8CAI7B,wBACKE,EAAQQ,KAAI,SAAAC,GACT,OACI,2BACI,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFNF,EAAOG,W,6NCtBpC,IAAMC,EAAU,2CACVC,EAAW,gCACJC,EAAkB,mCAClBC,EAAsB,uCACtBC,EAAoB,kCAEpBC,EAAsB,WAC/B,OAAOC,MAAM,GAAD,OAAIL,EAAJ,8BAAkCD,IACzCP,MAAK,SAAAc,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,UAEdjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC,YAGdC,EAAqB,SAAAC,GAC9B,OAAOR,MAAM,GAAD,OAAIL,EAAJ,8BAAkCa,EAAlC,YAA2Cd,IAClDP,MAAK,SAAAc,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,UAEdjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC,YAGdG,EAAoB,SAAA1B,GAC7B,OAAOiB,MAAM,GAAD,OAAIL,EAAJ,iBAAqBZ,EAArB,YAAgCW,IAAWP,MAAK,SAAAc,GACxD,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,WAINM,EAAoB,SAAA3B,GAC7B,OAAOiB,MAAM,GAAD,OAAIL,EAAJ,iBAAqBZ,EAArB,oBAAwCW,IAAWP,MAAK,SAAAc,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,WAINlB,EAAoB,SAAAH,GAC7B,OAAOiB,MAAM,GAAD,OAAIL,EAAJ,iBAAqBZ,EAArB,oBAAwCW,IAAWP,MAAK,SAAAc,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,OAAOjB,MAAK,SAAAkB,GAAI,OAAIA,EAAKC","sources":["components/Reviews/ErrorMessage.jsx","components/Reviews/index.jsx","services/moviesApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n    return <p>{message}</p>;\n};\n\nErrorMessage.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/moviesApi';\nimport ErrorMessage from './ErrorMessage';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        fetchMovieReviews(movieId).then(setReviews);\n    }, [movieId]);\n\n    if (reviews.length === 0) {\n        return <ErrorMessage message=\"We don't have any reviews for this movie\" />;\n    }\n\n    return (\n        <ul>\n            {reviews.map(review => {\n                return (\n                    <li key={review.id}>\n                        <h4>{review.author}</h4>\n                        <p>{review.content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default Reviews;\n","const API_KEY = 'api_key=37eb00bc9ebde6b8ee688dc1b47e357c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const BACKGROUND_BASE_URL = 'https://image.tmdb.org/t/p/original/';\nexport const CAST_PIC_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const fetchTrendingMovies = () => {\n    return fetch(`${BASE_URL}trending/movie/day?${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMoviesByTitle = title => {\n    return fetch(`${BASE_URL}search/movie?query=${title}&${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMovieDetails = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/credits?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/reviews?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json().then(data => data.results);\n    });\n};\n"],"names":["message","useState","reviews","setReviews","movieId","useParams","useEffect","fetchMovieReviews","then","length","map","review","author","content","id","API_KEY","BASE_URL","POSTER_BASE_URL","BACKGROUND_BASE_URL","CAST_PIC_BASE_URL","fetchTrendingMovies","fetch","res","ok","Error","json","data","results","fetchMoviesByTitle","title","fetchMovieDetails","fetchMovieCredits"],"sourceRoot":""}