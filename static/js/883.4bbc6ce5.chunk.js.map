{"version":3,"file":"static/js/883.4bbc6ce5.chunk.js","mappings":"oOACA,EAAwB,sBAAxB,EAAqD,qBAArD,EAA4F,gC,SC0D5F,EAtDqB,WACjB,OAGIA,EAAAA,EAAAA,UAAS,IAHb,sBACMC,EADN,EACMA,YAAaC,EADnB,EACmBA,cAAeC,EADlC,EACkCA,OAAQC,EAD1C,EAC0CA,SAAUC,EADpD,EACoDA,MAAOC,EAD3D,EAC2DA,aAAcC,EADzE,EACyEA,aACrEC,EAFJ,KAIQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAkBH,GAASI,KAAKL,GAAUM,MAAMC,QAAQC,OACzD,CAACP,IAEJ,IAAMQ,EAAShB,EAAW,UAAMiB,EAAAA,IAAN,OAAwBjB,GAAgB,GAC5DkB,EAAajB,EAAa,UAAMkB,EAAAA,IAAN,OAA4BlB,GAAkB,GACxEmB,EAAU,OAAGlB,QAAH,IAAGA,OAAH,EAAGA,EAAQmB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAMC,KAAK,MAEnDC,EAAkB,CACpBC,gBAAgB,mEAAD,OAAqER,EAArE,MAGnB,OACI,iCACI,4BACI,iBAAKS,UAAWC,EAAhB,WACI,gBAAKC,IAAKb,EAAQc,IAAK1B,KACvB,iBAAK2B,MAAON,EAAiBE,UAAWC,EAAxC,WACI,0BACKxB,EADL,YACcC,QADd,IACcA,OADd,EACcA,EAAc2B,MAAM,EAAG,GADrC,QAGA,wCAA+B,GAAf1B,EAAhB,QACA,sCACA,uBAAIH,KACJ,oCACA,uBAAIiB,WAGZ,4BACI,mDACA,gBAAIO,UAAWC,EAAf,WACI,yBACI,SAAC,KAAD,CAAMK,GAAG,OAAT,qBAEJ,yBACI,SAAC,KAAD,CAAMA,GAAG,UAAT,iCAKhB,SAAC,EAAAC,SAAD,CAAUC,SAAS,aAAnB,UACI,SAAC,KAAD,W,6NCrDhB,IAAMC,EAAU,2CACVC,EAAW,gCACJpB,EAAkB,mCAClBE,EAAsB,uCACtBmB,EAAoB,kCAEpBC,EAAsB,WAC/B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,8BAAkCD,IACzCxB,MAAK,SAAA6B,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,UAEdhC,MAAK,SAAAiC,GAAI,OAAIA,EAAKC,YAGdC,EAAqB,SAAA3C,GAC9B,OAAOoC,MAAM,GAAD,OAAIH,EAAJ,8BAAkCjC,EAAlC,YAA2CgC,IAClDxB,MAAK,SAAA6B,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,UAEdhC,MAAK,SAAAiC,GAAI,OAAIA,EAAKC,YAGdnC,EAAoB,SAAAH,GAC7B,OAAOgC,MAAM,GAAD,OAAIH,EAAJ,iBAAqB7B,EAArB,YAAgC4B,IAAWxB,MAAK,SAAA6B,GACxD,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,WAINI,EAAoB,SAAAxC,GAC7B,OAAOgC,MAAM,GAAD,OAAIH,EAAJ,iBAAqB7B,EAArB,oBAAwC4B,IAAWxB,MAAK,SAAA6B,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,WAINK,EAAoB,SAAAzC,GAC7B,OAAOgC,MAAM,GAAD,OAAIH,EAAJ,iBAAqB7B,EAArB,oBAAwC4B,IAAWxB,MAAK,SAAA6B,GAChE,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,qBAEpB,OAAOF,EAAIG,OAAOhC,MAAK,SAAAiC,GAAI,OAAIA,EAAKC","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieDetails/styles.module.css?7de5","components/MovieDetails/index.jsx","services/moviesApi.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie\":\"styles_movie__JAR4X\",\"info\":\"styles_info__yX6Fk\",\"additionalLinks\":\"styles_additionalLinks__hblzg\"};","import { useState, useEffect, Suspense } from 'react';\nimport { Link, Outlet, useParams } from 'react-router-dom';\nimport { fetchMovieDetails, POSTER_BASE_URL, BACKGROUND_BASE_URL } from 'services/moviesApi';\nimport styles from './styles.module.css';\n\nconst MovieDetails = () => {\n    const [\n        { poster_path, backdrop_path, genres, overview, title, release_date, vote_average },\n        setMovie,\n    ] = useState({});\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        fetchMovieDetails(movieId).then(setMovie).catch(console.log);\n    }, [movieId]);\n\n    const poster = poster_path ? `${POSTER_BASE_URL}${poster_path}` : '';\n    const background = backdrop_path ? `${BACKGROUND_BASE_URL}${backdrop_path}` : '';\n    const genresList = genres?.map(genre => genre.name).join(', ');\n\n    const backgroundStyle = {\n        backgroundImage: `linear-gradient(rgba(2,0,36,0.5) 0%, rgba(0,0,0,0.5) 100%), url(${background})`,\n    };\n\n    return (\n        <>\n            <div>\n                <div className={styles.movie}>\n                    <img src={poster} alt={title} />\n                    <div style={backgroundStyle} className={styles.info}>\n                        <h2>\n                            {title} ({release_date?.slice(0, 4)})\n                        </h2>\n                        <p>User score: {vote_average * 10}%</p>\n                        <h3>Overview</h3>\n                        <p>{overview}</p>\n                        <h3>Genres</h3>\n                        <p>{genresList}</p>\n                    </div>\n                </div>\n                <div>\n                    <p>Additional information</p>\n                    <ul className={styles.additionalLinks}>\n                        <li>\n                            <Link to=\"cast\">Cast</Link>\n                        </li>\n                        <li>\n                            <Link to=\"reviews\">Reviews</Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <Suspense fallback=\"Loading...\">\n                <Outlet />\n            </Suspense>\n        </>\n    );\n};\n\nexport default MovieDetails;\n","const API_KEY = 'api_key=37eb00bc9ebde6b8ee688dc1b47e357c';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const POSTER_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const BACKGROUND_BASE_URL = 'https://image.tmdb.org/t/p/original/';\nexport const CAST_PIC_BASE_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport const fetchTrendingMovies = () => {\n    return fetch(`${BASE_URL}trending/movie/day?${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMoviesByTitle = title => {\n    return fetch(`${BASE_URL}search/movie?query=${title}&${API_KEY}`)\n        .then(res => {\n            if (!res.ok) {\n                throw new Error('Nothing was found');\n            }\n            return res.json();\n        })\n        .then(data => data.results);\n};\n\nexport const fetchMovieDetails = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/credits?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json();\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n    return fetch(`${BASE_URL}movie/${movieId}/reviews?${API_KEY}`).then(res => {\n        if (!res.ok) {\n            throw new Error('Nothing was found');\n        }\n        return res.json().then(data => data.results);\n    });\n};\n"],"names":["useState","poster_path","backdrop_path","genres","overview","title","release_date","vote_average","setMovie","movieId","useParams","useEffect","fetchMovieDetails","then","catch","console","log","poster","POSTER_BASE_URL","background","BACKGROUND_BASE_URL","genresList","map","genre","name","join","backgroundStyle","backgroundImage","className","styles","src","alt","style","slice","to","Suspense","fallback","API_KEY","BASE_URL","CAST_PIC_BASE_URL","fetchTrendingMovies","fetch","res","ok","Error","json","data","results","fetchMoviesByTitle","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}